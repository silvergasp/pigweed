# Copyright 2020 The Pigweed Authors
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may not
# use this file except in compliance with the License. You may obtain a copy of
# the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations under
# the License.

load(
    "//pw_build:pigweed.bzl",
    "pw_cc_facade",
    "pw_cc_library",
    "pw_cc_test",
)
load("//pw_protobuf_compiler:proto.bzl", "pw_proto_library")

package(default_visibility = ["//visibility:public"])

licenses(["notice"])

proto_library(
    name = "thread_proto",
    srcs = ["pw_thread_protos/thread.proto"],
    strip_import_prefix = "//pw_thread",
    deps = ["//pw_tokenizer:tokenizer_proto"],
)

pw_proto_library(
    name = "thread_pw_proto",
    deps = [":thread_proto"],
)

pw_cc_facade(
    name = "id",
    hdrs = [
        "public/pw_thread/id.h",
    ],
    includes = ["public"],
)

pw_cc_facade(
    name = "sleep",
    srcs = [
        "sleep.cc",
    ],
    hdrs = [
        "public/pw_thread/sleep.h",
    ],
    includes = ["public"],
    deps = [
        ":id",
        "//pw_chrono:system_clock",
        "//pw_preprocessor",
    ],
)

pw_cc_facade(
    name = "thread",
    srcs = [
        "thread.cc",
    ],
    hdrs = [
        "public/pw_thread/config.h",
        "public/pw_thread/detached_thread.h",
        "public/pw_thread/thread.h",
    ],
    includes = ["public"],
    deps = [
        ":id",
        ":thread_core",
    ],
)

pw_cc_library(
    name = "thread_core",
    hdrs = [
        "public/pw_thread/thread_core.h",
    ],
    includes = ["public"],
)

pw_cc_facade(
    name = "yield",
    srcs = [
        "yield.cc",
    ],
    hdrs = [
        "public/pw_thread/yield.h",
    ],
    includes = ["public"],
    deps = [
        ":id",
        ":thread_pw_proto.pwpb",
        "//pw_preprocessor",
    ],
)

pw_cc_library(
    name = "snapshot",
    srcs = [
        "snapshot.cc",
    ],
    hdrs = [
        "public/pw_thread/config.h",
        "public/pw_thread/snapshot.h",
    ],
    includes = ["public"],
    deps = [
        ":thread_pw_proto.pwpb",
        "//pw_bytes",
        "//pw_function",
        "//pw_log",
        "//pw_protobuf",
        "//pw_status",
    ],
)

pw_cc_library(
    name = "test_threads_header",
    hdrs = [
        "public/pw_thread/test_threads.h",
    ],
    deps = [
        ":thread",
    ],
)

# To instantiate this as a pw_cc_test, depend on this pw_cc_library and the
# pw_cc_library which implements the backend for test_threads_header. See
# //pw_thread:thread_backend_test as an example.
pw_cc_library(
    name = "thread_facade_test",
    srcs = [
        "thread_facade_test.cc",
    ],
    deps = [
        ":id",
        ":test_threads_header",
        ":thread",
        "//pw_chrono:system_clock",
        "//pw_sync:binary_semaphore",
        "//pw_unit_test",
    ],
)

pw_cc_test(
    name = "id_facade_test",
    srcs = [
        "id_facade_test.cc",
    ],
    deps = [
        ":id",
        "//pw_unit_test",
    ],
)

pw_cc_test(
    name = "sleep_facade_test",
    srcs = [
        "sleep_facade_test.cc",
        "sleep_facade_test_c.c",
    ],
    deps = [
        ":sleep",
        "//pw_chrono:system_clock",
        "//pw_preprocessor",
        "//pw_unit_test",
    ],
)

pw_cc_test(
    name = "yield_facade_test",
    srcs = [
        "yield_facade_test.cc",
        "yield_facade_test_c.c",
    ],
    deps = [
        ":yield",
        "//pw_preprocessor",
        "//pw_unit_test",
    ],
)
